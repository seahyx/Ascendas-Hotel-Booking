// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String   @unique
    password      String
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Booking {
  id              Int       @id @default(autoincrement())
  destinationId   Int
  hotelId         Int
  bookingInfoId   Int
  guestInfoId     Int
  payeeInfoId     Int
  additionalInfo String
  bookingInfo     BookingDisplayInformation @relation("booking_info", fields: [bookingInfoId], references: [id])
  guestInfo       GuestInformation        @relation("guest_info", fields: [guestInfoId], references: [id])
  payeeInfo       PayeeInformation        @relation("payee_info", fields: [payeeInfoId], references: [id])
}

model BookingDisplayInformation {
  id             Int       @id @default(autoincrement())
  numberOfNights Int
  numberOfRooms Int
  startDate      DateTime
  endDate        DateTime
  adults         Int
  children       Int
  messageToHotel String
  roomTypes      String
  avgRoomCost   Float
  roomRate      Float
  tax       Float
  bookings       Booking[] @relation("booking_info")
}

model GuestInformation {
  id          Int    @id
  uid         String
  firstName   String
  lastName    String
  phoneNumber String
  email       String
bookings      Booking[] @relation("guest_info")
}

model PayeeInformation {
  id            Int    @id @default(autoincrement())
  bookings      Booking[] @relation("payee_info")
}





